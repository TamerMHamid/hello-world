# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orchestrate or schedule a set of jobs
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # say-hello:
  #   # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  #   docker:
  #     - image: cimg/base:stable
  #   # Add steps to the job
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#steps
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Say hello"
  #         command: "echo Hello, World!"
  print_hello:
    environment:
      CODE: tamer elorsi
    docker:
      - image: cimg/node:13.8.0
    steps:
      - run: 
          name: test1
          command: |
            echo $CODE 
            echo hello from tamer
      - run:
          name: test2
          command: |
            echo "this is pipeline id << pipeline.id >>"
  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo world
      - run:
          command: |
             curl -d 'email=tamer@innovixsolutions.com' https://kvdb.io
  build:
    environment:
      MY_ENV_VAR: 12345
    docker:
      - image:  cimg/base:2020.01
    steps:
      - checkout
      - run:
          name: "eco an env var that is part of our project"
          command:
            echo ${MY_ENV_VAR}
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  # say-hello-workflow:
  #   jobs:
  #     - say-hello
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - print_hello
      - print_world:
          requires:
            - print_hello

  test-env-vars:
    jobs:
      - build
  
